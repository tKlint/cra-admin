{"version":3,"file":"static/js/584.d689924b.chunk.js","mappings":"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","sources":["pages/login/index.tsx","../node_modules/react-intl/lib/src/components/message.js"],"sourcesContent":["import { Button, Form, Input } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { useAppDispatch } from '../../store/hooks';\nimport { fetchUser } from '../../store/user';\nimport { useState } from 'react';\n\nexport default function Login() {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState(false);\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 6 }\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 18 }\n    }\n  };\n  const loginHandle = async (values: Record<string, string>) => {\n    setLoading(true);\n    await dispatch(fetchUser(values));\n    setLoading(false);\n  };\n  return (\n    <div className=\"w-screen h-screen place-content-center grid\">\n      <div className=\"p-[16px] rounded-lg bg-slate-300 h-auto\">\n        <Form<Record<string, string>> className=\"w-96\" {...formItemLayout} onFinish={loginHandle}>\n          <Form.Item label=\"账号\" name=\"loginId\" rules={[{ required: true }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"密码\" name=\"password\" rules={[{ required: true }]}>\n            <Input.Password />\n          </Form.Item>\n          <Form.Item wrapperCol={{ offset: 6 }}>\n            <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n              <FormattedMessage id=\"page.login.login\" />\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n"],"names":["Login","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","loading","setLoading","loginHandle","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","fetchUser","stop","_x","apply","arguments","_jsx","className","children","_jsxs","Form","_objectSpread","labelCol","xs","span","sm","wrapperCol","onFinish","Item","label","name","rules","required","Input","Password","offset","Button","type","htmlType","FormattedMessage","id","props","intl","useIntl","formatMessage","_a","textComponent","Text","React","description","defaultMessage","_b","tagName","Component","nodes","ignoreTag","Array","isArray","toArray","displayName","MemoizedFormattedMessage","prevProps","nextProps","otherProps","__rest","nextValues","nextOtherProps","shallowEqual"],"sourceRoot":""}