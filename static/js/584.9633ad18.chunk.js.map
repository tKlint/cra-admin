{"version":3,"file":"static/js/584.9633ad18.chunk.js","mappings":"yOAMe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,KACjBC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GACpBI,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACD,OAAjBV,GAAW,GAAMQ,EAAAE,KAAA,EACXjB,GAASkB,EAAAA,EAAAA,OAAa,KAAD,EAC3BX,GAAW,GAAO,wBAAAQ,EAAAI,OAAA,GAAAN,EAAA,KACnB,kBAJgB,OAAAJ,EAAAW,MAAA,KAAAC,UAAA,KAKjB,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACE,EAAAA,EAAM,CAAClB,QAASA,EAASmB,QAASjB,EAAYe,UAC7CD,EAAAA,EAAAA,KAACI,EAAAA,EAAgB,CAACC,GAAG,wBAI7B,C,kECNA,SAASD,EAAiBE,GACtB,IAAIC,GAAOC,EAAAA,EAAAA,KACPC,EAAgBF,EAAKE,cAAeC,EAAKH,EAAKI,cAAeC,OAAc,IAAPF,EAAgBG,EAAAA,SAAiBH,EACrGL,EAAKC,EAAMD,GAAIS,EAAcR,EAAMQ,YAAaC,EAAiBT,EAAMS,eAAgBC,EAASV,EAAMU,OAAQf,EAAWK,EAAML,SAAUgB,EAAKX,EAAMY,QAASC,OAAmB,IAAPF,EAAgBL,EAAOK,EAEhMG,EAAQX,EADK,CAAEJ,GAAIA,EAAIS,YAAaA,EAAaC,eAAgBA,GAC/BC,EAAQ,CAC1CK,UAHgNf,EAAMe,YAK1N,MAAwB,oBAAbpB,EACAA,EAASqB,MAAMC,QAAQH,GAASA,EAAQ,CAACA,IAEhDD,EACON,EAAAA,cAAoBM,EAAW,KAAMN,EAAAA,SAAeW,QAAQJ,IAEhEP,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMO,EACrD,CACAhB,EAAiBqB,YAAc,mBAC/B,IAAIC,EAA2Bb,EAAAA,KAAWT,GAvB1C,SAAkBuB,EAAWC,GACzB,IAAIZ,EAASW,EAAUX,OAAQa,GAAaC,EAAAA,EAAAA,IAAOH,EAAW,CAAC,WAC3DI,EAAaH,EAAUZ,OAAQgB,GAAiBF,EAAAA,EAAAA,IAAOF,EAAW,CAAC,WACvE,OAAQK,EAAAA,EAAAA,IAAaF,EAAYf,KAC7BiB,EAAAA,EAAAA,IAAaJ,EAAYG,EACjC,IAmBAN,EAAyBD,YAAc,2BACvC,K","sources":["pages/login/index.tsx","../node_modules/react-intl/lib/src/components/message.js"],"sourcesContent":["import { Button } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { useAppDispatch } from '../../store/hooks';\nimport { fetchUser } from '../../store/user';\nimport { useState } from 'react';\n\nexport default function Login() {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState(false);\n  const loginHandle = async () => {\n    setLoading(true);\n    await dispatch(fetchUser());\n    setLoading(false);\n  };\n  return (\n    <div>\n      <Button loading={loading} onClick={loginHandle}>\n        <FormattedMessage id=\"page.login.login\" />\n      </Button>\n    </div>\n  );\n}\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n"],"names":["Login","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","loading","setLoading","loginHandle","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","fetchUser","stop","apply","arguments","_jsx","children","Button","onClick","FormattedMessage","id","props","intl","useIntl","formatMessage","_a","textComponent","Text","React","description","defaultMessage","values","_b","tagName","Component","nodes","ignoreTag","Array","isArray","toArray","displayName","MemoizedFormattedMessage","prevProps","nextProps","otherProps","__rest","nextValues","nextOtherProps","shallowEqual"],"sourceRoot":""}