{"version":3,"file":"static/js/789.76d6fd26.chunk.js","mappings":"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","sources":["utils/tableMergerer.ts","pages/dashboard/index.tsx"],"sourcesContent":["import { Key, ReactNode, useRef } from 'react';\n\nexport type MergeData = {\n  /**\n   * 开始并位置\n   */\n  s: number;\n  /**\n   * 结束合并位置\n   */\n  e: number;\n  /**\n   * 索引切片\n   * @description 当前合并组所包含的row索引位置\n   */\n  section: number[];\n  /**\n   * 当前合并组所包含的row唯一标识\n   */\n  keys: React.Key[];\n  /**\n   * 合并后的排序索引\n   */\n  mergeIndex: number;\n};\n\nexport type RenderFlag = {\n  (\n    dom: ReactNode,\n    options: {\n      fieldKey: string;\n      rowIdx: number;\n    }\n  ): RenderObject;\n};\n\nexport type RenderObject = {\n  children: ReactNode;\n  props: { rowSpan: number };\n};\n\nexport default class TableMergerer<T = Record<string, unknown>> {\n  /**\n   * 合并数据集合\n   */\n  readonly mergeDataSet: Record<React.Key, Record<string, MergeData>>;\n  constructor() {\n    this.mergeDataSet = {};\n  }\n  /**\n   * 创建字段合并数据\n   */\n  private createFeildMergeData(fieldKey: string, rowIdx: number, rowValue: Key, mergeIndex: number) {\n    return {\n      [`idx-${rowIdx}`]: {\n        s: rowIdx,\n        e: rowIdx,\n        section: [rowIdx],\n        keys: [rowValue as Key],\n        mergeIndex\n      }\n    };\n  }\n  /**\n   * 根据合并字段和索引查找合并组名称\n   */\n  findGroupKey(fieldKey: string, rowIdx: number) {\n    const curFieldData = this.mergeDataSet[fieldKey];\n    const allGroupKeys = Object.keys(curFieldData);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return allGroupKeys.find((groupKey: string) => curFieldData[groupKey].section.at(-1)! + 1 === rowIdx);\n  }\n  /**\n   * 设置合并字段数据\n   * @param fieldKey 合并字段key\n   * @param rowValue 合并字段value\n   * @param rowIdx 行索引\n   * @param mergeIndex 合并索引\n   * @returns\n   */\n  private setMergeFieldData(fieldKey: string, rowValue: T[keyof T], rowIdx: number, mergeIndex: number) {\n    let isFirstRow = false;\n    // 不存在合并数据\n    if (!this.mergeDataSet[fieldKey]) {\n      isFirstRow = true;\n      // 新增\n      this.mergeDataSet[fieldKey] = this.createFeildMergeData(fieldKey, rowIdx, rowValue as string, mergeIndex);\n    } else {\n      /**\n       * 是否为紧随其后的节点\n       */\n      let isBehindNode = false;\n      const targetGroupKey = this.findGroupKey(fieldKey, rowIdx);\n\n      if (targetGroupKey) {\n        isBehindNode = true;\n      }\n      // 紧贴其后的节点可以放到同一个合并组内\n      if (isBehindNode && targetGroupKey) {\n        // 紧随其后的节点依此入栈并更新结束索引位置\n        this.mergeDataSet[fieldKey][targetGroupKey].e = rowIdx;\n        this.mergeDataSet[fieldKey][targetGroupKey].section.push(rowIdx);\n        this.mergeDataSet[fieldKey][targetGroupKey].keys.push(rowValue as string);\n      } else {\n        // 不是紧随其后的节点 为该节点新增合并组\n        isFirstRow = true;\n        this.mergeDataSet[fieldKey][`idx-${rowIdx}`] = this.createFeildMergeData(\n          fieldKey,\n          rowIdx,\n          rowValue as string,\n          mergeIndex\n        )[`idx-${rowIdx}`];\n      }\n    }\n    return isFirstRow;\n  }\n  /**\n   * 设置合并数据\n   * @param dataSource 数据源\n   * @param dataIndex 主键唯一标识\n   * @param fields 合并字段\n   * @returns\n   */\n  setMergeData(dataSource: T[], dataIndex: keyof T, ...fields: (keyof T)[]) {\n    if (!this.mergeDataSet) {\n      return;\n    }\n    let mergeIndex = 0;\n    dataSource.forEach((row, idx) => {\n      fields.forEach((field, fieldIdx) => {\n        const fieldKey = `${field as string}-${row[field]}`;\n        // const isNewField = this.mergeDataSet[fieldKey] ? false :  true;\n        const isNewField = this.setMergeFieldData(fieldKey, row[dataIndex], idx, mergeIndex);\n        if (isNewField && fieldIdx == 0) {\n          mergeIndex += 1;\n        }\n      });\n    });\n  }\n  /**\n   * 渲染合并内容\n   * @param dom 渲染dom\n   * @description 当传入'index'时, 会渲染合并后的索引\n   * @param fieldKey 合并字段key\n   * @param rowIdx 行索引\n   * @param renderFlag 自定义合并规则\n   * @returns\n   */\n  render(dom: ReactNode | 'index' | null, fieldKey: string, rowIdx: number, renderFlag?: RenderFlag | undefined) {\n    const { s, e, mergeIndex } = this.getCurRowMergeData(fieldKey, rowIdx);\n    const renderDom = dom === 'index' ? mergeIndex : dom;\n    if (renderFlag) {\n      return renderFlag(renderDom, {\n        rowIdx,\n        fieldKey\n      });\n    }\n\n    const renderObject: RenderObject = {\n      children: renderDom,\n      props: { rowSpan: 0 }\n    };\n\n    /**\n     * 是否为无效的数据\n     */\n    const isUnValidRow = s === undefined || e === undefined;\n    /**\n     * 是否为只有一行的数据\n     */\n    const isOnlyOneRow = rowIdx > e || (rowIdx === s && rowIdx === e);\n    /**\n     * 是否为第一行数据\n     */\n    const isFirstRow = rowIdx === s;\n    if (isUnValidRow || isOnlyOneRow) {\n      renderObject.props.rowSpan = 1;\n    } else if (isFirstRow) {\n      renderObject.props.rowSpan = e - s + 1;\n    }\n    return renderObject;\n  }\n  /**\n   * 获取当前行合并数据\n   * @param fieldKey 合并字段\n   * @param rowIdx 行索引\n   * @returns\n   */\n  getCurRowMergeData(fieldKey: string, rowIdx: number) {\n    const fieldValues = this.mergeDataSet?.[fieldKey] || {};\n    const idxKeys = Object.keys(fieldValues);\n    const targetGroup = idxKeys.find(key => fieldValues?.[key]?.section?.includes(rowIdx));\n    return fieldValues[targetGroup || ''] || {};\n  }\n}\n\nexport function useTableMergerer<T>() {\n  const tableMergerIns = useRef<TableMergerer<T> | null>(null);\n  if (tableMergerIns.current === null) {\n    tableMergerIns.current = new TableMergerer<T>();\n  }\n  return tableMergerIns.current;\n}\n","import { useTableMergerer } from '@/utils/tableMergerer';\nimport { Table, Tag } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport React, { useEffect, useState } from 'react';\n\nconst arr = [\n  {\n    id: 'id-1',\n    name: 'a',\n    age: 18\n  },\n  {\n    id: 'id-2',\n    name: 'a',\n    age: 19\n  },\n  {\n    id: 'id-3',\n    name: 'b',\n    age: 19\n  },\n  {\n    id: 'id-4',\n    name: 'a',\n    age: 18\n  },\n  {\n    id: 'id-7',\n    name: 'a',\n    age: 18\n  }\n];\n\ntype DataType = typeof arr;\nexport default function Dashboard() {\n  const [dataSource, setDataSource] = useState<DataType>([]);\n  const tableMergerer = useTableMergerer<DataType[number]>();\n  const columns: ColumnsType<DataType[number]> = [\n    {\n      title: 'mergeIdx',\n      render(_, row, idx) {\n        return tableMergerer.getCurRowMergeData(`name-${row.name}`, idx).mergeIndex;\n      },\n      onCell: (row, idx = 0) => {\n        return tableMergerer.render(null, `name-${row.name}`, idx).props;\n      }\n    },\n    {\n      title: '姓名',\n      dataIndex: 'name',\n      render: dom => {\n        return <Tag>{dom}</Tag>;\n      },\n      onCell: (row, idx = 0) => {\n        return tableMergerer.render(null, `name-${row.name}`, idx).props;\n      }\n    },\n    {\n      title: '年龄',\n      dataIndex: 'age',\n      onCell: (row, idx = 0) => {\n        return tableMergerer.render(null, `age-${row.age}`, idx).props;\n      }\n    },\n    {\n      title: 'index',\n      render(value, record, index) {\n        return index + 1;\n      }\n    }\n  ];\n  useEffect(() => {\n    setDataSource(arr);\n    tableMergerer.setMergeData(arr, 'id', 'name', 'age');\n  }, []);\n\n  return (\n    <div>\n      Dashboard\n      <Table columns={columns} dataSource={dataSource} rowKey=\"id\" pagination={false} />\n    </div>\n  );\n}\n"],"names":["TableMergerer","_classCallCheck","mergeDataSet","this","_createClass","key","value","fieldKey","rowIdx","rowValue","mergeIndex","_defineProperty","concat","s","e","section","keys","curFieldData","Object","find","groupKey","at","isFirstRow","isBehindNode","targetGroupKey","findGroupKey","push","createFeildMergeData","dataSource","dataIndex","_this","_len","arguments","length","fields","Array","_key","forEach","row","idx","field","fieldIdx","setMergeFieldData","dom","renderFlag","_this$getCurRowMergeD","getCurRowMergeData","renderDom","renderObject","children","props","rowSpan","undefined","_this$mergeDataSet","fieldValues","targetGroup","_fieldValues$key","_fieldValues$key$sect","includes","arr","id","name","age","Dashboard","_useState","useState","_useState2","_slicedToArray","setDataSource","tableMergerer","tableMergerIns","useRef","current","useTableMergerer","columns","title","render","_","onCell","_jsx","Tag","record","index","useEffect","setMergeData","_jsxs","Table","rowKey","pagination"],"sourceRoot":""}